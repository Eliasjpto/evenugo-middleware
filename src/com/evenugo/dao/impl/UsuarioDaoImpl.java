package com.evenugo.dao.impl;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.evenugo.dao.UsuarioDao;
import com.evenugo.dao.exceptions.DataException;
import com.evenugo.model.Evento;
import com.evenugo.model.Localidad;
import com.evenugo.model.Pais;
import com.evenugo.model.Usuario;
import com.evenugo.util.DBUtils;
import com.evenugo.util.PasswordEncryptionUtil;


public class UsuarioDaoImpl implements UsuarioDao {
	//	private static Logger logger = LogManager.getLogger(UsuarioDaoImpl.class.getName());
	@Override
	public Usuario  findByID(Connection cn,long PK)
			throws DataException{
		PreparedStatement preparedStatement = null;
		String query = null;
		ResultSet rs = null;
		Usuario u  = null;

		try {
			//Crear una sentencia SQL y Meter en rs el resultado de la query.
			query = "select  u.NOMBRE, u.APELLIDO, u.DIRECCION, u.ID_LOCALIDAD, u.FECHA_NACIMIENTO,u.ID_USUARIO,u.PASSWORD, u.TELEFONO, u.EMAIL,u.ID_SEXO"
					+"  from usuario u"
					+"  WHERE u.ID_USUARIO = ? ";


			preparedStatement = cn.prepareStatement(query);
			System.out.println(query);


			int i = 1;
			preparedStatement.setLong(i++,PK);

			rs = preparedStatement.executeQuery();
			// ejecutar query
			while (rs.next()) {
				u =	(loadNext(rs));
			}			
			return u;

		} catch (SQLException e) {
			System.out.println("Problema en la Query.");
			throw new DataException(e);
		}  finally {
			DBUtils.closeResultSet(rs);
			DBUtils.closeStatement(preparedStatement);
		}
	}	



	@Override
	public Usuario findByEmail (Connection cn,String email)throws DataException {

		Statement statement = null;
		String query = null;
		ResultSet rs = null;
		Usuario u  = null;
		PreparedStatement preparedStatement = null;
		try {
			cn = DBUtils.conectar();
			//Crear una sentencia SQL y Meter en rs el resultado de la query.
			query = "select  u.NOMBRE, u.APELLIDO, u.DIRECCION, u.ID_LOCALIDAD, u.FECHA_NACIMIENTO,u.ID_USUARIO,u.PASSWORD, u.TELEFONO, u.EMAIL,u.ID_SEXO"
					+"  from usuario u"
					+"  WHERE u.EMAIL= ? ";


			preparedStatement = cn.prepareStatement(query);
			System.out.println(query);

			int i = 1;

			preparedStatement.setString(i++, email);

			rs = preparedStatement.executeQuery();

			if(rs.next()) {
				u = loadNext(rs);

			}
			return u;
		} catch (SQLException e) {
			System.out.println("Problema en la Query."); //logger
			throw new DataException(e);
		} finally {
			DBUtils.closeResultSet(rs);
			DBUtils.closeStatement(preparedStatement);
		}

	}



	protected Usuario loadNext(ResultSet rs)
			throws SQLException,DataException {	
		int i = 1;
		Usuario   u = new Usuario ();
		u.setNombre(rs.getString(i++));
		u.setApellidos(rs.getString(i++));
		u.setDireccion(rs.getString(i++));
		u.setLocalidad(rs.getLong(i++));
		u.setFechaNacimiento(rs.getDate(i++));
		u.setPK(rs.getLong(i++));
		u.setPassword(rs.getString(i++));
		u.setTelefono(rs.getString(i++));
		u.setEmail(rs.getString(i++));
		u.setSexo((rs.getString(i++))); // char??
		return u;
	}

	@Override
	public Usuario create(Connection cn, Usuario u) throws DataException {
	
	PreparedStatement preparedStatement = null;
	ResultSet rs = null;
	try {          

		// Creamos el preparedstatement
		String queryString = 
		"INSERT INTO Usuario(NOMBRE,APELLIDO,DIRECCION,ID_LOCALIDAD,FECHA_NACIMIENTO,PASSWORD,TELEFONO,EMAIL,ID_SEXO) "
		+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

		preparedStatement = cn.prepareStatement(queryString,
								Statement.RETURN_GENERATED_KEYS);

		// Rellenamos el "preparedStatement"
		int i = 1;    
		preparedStatement.setString(i++, u.getNombre());
		preparedStatement.setString(i++, u.getApellidos());
		preparedStatement.setString(i++, u.getDireccion());
		preparedStatement.setLong(i++, u.getLocalidad());
		preparedStatement.setDate(i++, new java.sql.Date(u.getFechaNacimiento().getTime()));
		preparedStatement.setString(i++, u.getPassword());
		preparedStatement.setString(i++, u.getTelefono());
		preparedStatement.setString(i++, u.getEmail());
		preparedStatement.setString(i++, u.getSexo());		
		
		
		// Execute query
		int insertedRows = preparedStatement.executeUpdate();

		if (insertedRows == 0) {
			throw new SQLException("Can not add row to table 'Usuario'");
		}

		// Recuperamos la PK generada
		rs = preparedStatement.getGeneratedKeys();
		if (rs.next()) {
			
			
				Long pk = rs.getLong(1); 
				u.setPK(pk);
		} else {
			throw new DataException("Unable to fetch autogenerated primary key");
		}

		// Return the DTO
		return u;

	} catch (SQLException e) {
		throw new DataException(e);
	} finally {
		DBUtils.closeResultSet(rs);
		DBUtils.closeStatement(preparedStatement);
	}
}



	@Override
	public Usuario update(Connection cn, Usuario u) throws DataException {
		// TODO Auto-generated method stub
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		try {          
		 
			// Creamos el preparedstatement
			String queryString = 
			"UPDATE Usuario "
			+"SET NOMBRE = ? "
			+"SET APELLIDO = ? "
			+"SET DIRECCION = ? "
			+"SET ID_LOCALIDAD = ? "
			+"SET FECHA_NACIMIENTO = ? " 
            +"SET PASSWORD = ? "
            +"SET TELEFONO = ? "
            +"SET EMAIL =  ? "
            +"ID_SEXO = ? "
			+"WHERE ID_USUARIO = ?";

			preparedStatement = cn.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			// Rellenamos el "preparedStatement"
			int i = 1;    
			preparedStatement.setString(i++, u.getNombre());
			preparedStatement.setString(i++, u.getApellidos());
			preparedStatement.setString(i++, u.getDireccion());
			preparedStatement.setLong(i++, u.getLocalidad());
			preparedStatement.setDate(i++, new java.sql.Date(u.getFechaNacimiento().getTime()));
			preparedStatement.setString(i++, u.getPassword());
			preparedStatement.setString(i++, u.getTelefono());
			preparedStatement.setString(i++, u.getEmail());
			preparedStatement.setString(i++, u.getSexo());		
			
			
			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Usuario'");
			}

			// Recuperamos la PK generada
			rs = preparedStatement.getGeneratedKeys();
			if (rs.next()) {
				
				
					Long pk = rs.getLong(1); 
					u.setPK(pk);
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}

			// Return the DTO
			return u;

		} catch (SQLException e) {
			throw new DataException(e);
		} finally {
			DBUtils.closeResultSet(rs);
			DBUtils.closeStatement(preparedStatement);
		}
	}
	




}
